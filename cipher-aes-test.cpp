#include <cstdlib>
#include <cstdint>
#include "cipher-aes.hpp"
#include "taptests.hpp"

// FIPS 197 Advanced Encryption Standard (AES)
// Appendix C - Example Vectors

// C.1 AES-128
void
test_key128 (test::simple& t)
{
    std::array<std::uint8_t,16> const plain {
        {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
         0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff}
    };
    std::array<std::uint8_t,16> const key128 {
        {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
         0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f},
    };
    std::array<std::uint8_t,16> const expected_cipher {
        {0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30,
         0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a},
    };
    std::array<std::uint8_t,16> got_cipher;
    std::array<std::uint8_t,16> got_plain;

    cipher::aes_type aes;
    aes.set_key128 (key128);
    aes.encrypt (plain, got_cipher);
    aes.decrypt (got_cipher, got_plain);
    t.ok (expected_cipher == got_cipher, "encrypt key128");
    t.ok (plain == got_plain, "decrypt key128");
}

// C.2 AES-192
void
test_key192 (test::simple& t)
{
    std::array<std::uint8_t,16> const plain {
        {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
         0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff}
    };
    std::array<std::uint8_t,24> const key192 {
        {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
         0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
         0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17},
    };
    std::array<std::uint8_t,16> const expected_cipher {
        {0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0,
         0x6e, 0xaf, 0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91},
    };
    std::array<std::uint8_t,16> got_cipher;
    std::array<std::uint8_t,16> got_plain;

    cipher::aes_type aes;
    aes.set_key192 (key192);
    aes.encrypt (plain, got_cipher);
    aes.decrypt (got_cipher, got_plain);
    t.ok (expected_cipher == got_cipher, "encrypt key192");
    t.ok (plain == got_plain, "decrypt key192");
}

// C.3 AES-256
void
test_key256 (test::simple& t)
{
    std::array<std::uint8_t,16> const plain {
        {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
         0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff}
    };
    std::array<std::uint8_t,32> const key256 {
        {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
         0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
         0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
         0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f},
    };
    std::array<std::uint8_t,16> const expected_cipher {
        {0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf,
         0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89},
    };
    std::array<std::uint8_t,16> got_cipher;
    std::array<std::uint8_t,16> got_plain;

    cipher::aes_type aes;
    aes.set_key256 (key256);
    aes.encrypt (plain, got_cipher);
    aes.decrypt (got_cipher, got_plain);
    t.ok (expected_cipher == got_cipher, "encrypt key256");
    t.ok (plain == got_plain, "decrypt key256");
}

int
main ()
{
    test::simple t (6);
    test_key128 (t);
    test_key192 (t);
    test_key256 (t);
    return t.done_testing ();
}
